plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'ru.t1.club-card'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.liquibase:liquibase-core'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.mapstruct:mapstruct:1.6.2'

	compileOnly 'org.projectlombok:lombok'

// 	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
//     afterEvaluate {
//         classDirectories.setFrom(files(classDirectories.files.collect {
//             fileTree(dir: it, exclude: [
//                 "ru/t1/clubcard/authservice/util/**",
//                 "ru/t1/clubcard/authservice/repository/**",
//                 "ru/t1/clubcard/authservice/exception/**",
//                 "ru/t1/clubcard/authservice/config/**",
//                 "ru/t1/clubcard/authservice/mapper/**",
//                 "ru/t1/clubcard/authservice/controller/RoleAdminController.class",
//                 "ru/t1/clubcard/authservice/controller/RoleSuperAdminController.class",
//                 "ru/t1/clubcard/authservice/controller/RoleUserController.class"
//             ])
//         }))
//     }
}
